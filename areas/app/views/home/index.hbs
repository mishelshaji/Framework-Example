<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    {{> styles}}
</head>

<body>
    {{> navbar}}
    <div class="container">
        <h1 class="text-center my-4" style="font-family: 'Bungee Shade', cursive;
font-size: 500%">ANGELIC</h1>
        <p class="text-center text-bold" style="font-family: sans-serif;">IS RUNNING!üéâüéâüéâ</p>

        <div class="alert alert-info">
            <h2>‚ö†Ô∏è Warning - This is an alpha version and is not production ready.</small></h2>
            <hr>
            <p>
                <b>This framework was created with inspiration from working on a project with Georgekutty. </b>
                <br>
                <p>I am primarily a .NET Core developer (I ‚ù§Ô∏è .NET) and I got a chance to work on a Node-Express project with Georgekutty and realized that the Node web development ecosystem (JS and express) is lacking several features that are available in .NET as a core functionality. As a result, developers have to rely of third-party libraries. So I decided to create a new batteries included web development framework for NodeJS.</p>
                <p>This framework is inspired by .NET core, Django and Angular.</p>
                <h3>Planned features</h3>
                <p>‚úÖ Form handling and automatic request body parsing.</p>
                <p>‚úÖ An identity system (.NET Identity).</p>
                <p>‚úÖ An easy to use routing system.</p>
                <p>‚úÖ MVC Architecture. (.NET Core)</p>
                <p>‚úÖ Forms, automatic parsing and validation like Django forms.</p>
                <p>‚úÖ Middleware support. (.NET Core and Django)</p>
                <p>‚úÖ Dependency Injection support. (.NET Core MVC and Angular)</p>
                <p>‚úÖ CLI with code generation support (.NET Scaffolding).</p>
                <p>‚úÖ Data mapper ORM with migrations. (.NET Entity Framework core). The framework currently uses prisma. I am not planning to add sequelize support. </p>
            </p>
        </div>
        <div style="font-family: 'Montserrat', sans-serif;">
            <div class="row">
                <h2 class="text-center font-bold">What's next?</h2>

                <p class="mt-5"><b>‚úÖ Enable database support:</b></p>
                <div class="bg-dark text-light rounded shadow-lg d-flex px-2 py-3">
                    <span>enable-migrations</span>
                </div>

                <p class="mt-5"><b>‚úÖ Configure database connection:</b></p>
                <div class="bg-dark text-light rounded shadow-lg px-2 py-3">
                    <p>üóÉÔ∏è .env</p>
                    <hr>
                    <span>DATABASE_URL="mysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;database&gt;?schema=public"</span>
                </div>

                <p class="mt-5"><b>‚úÖ Create a model:</b></p>
                <div class="bg-dark text-light rounded shadow-lg px-2 py-3">
                    <p>üóÉÔ∏è prisma/schema.prisma</p>
                    <hr>
                    <code>
                        // This is your Prisma schema file, <br>
                        // learn more about it in the docs: https://pris.ly/d/prisma-schema <br>
                        generator client { <br>
                            provider = "prisma-client-js" <br>
                        } <br>
                        <br>
                        datasource db { <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;provider = "mysql" <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;url      = env("DATABASE_URL") <br>
                        } <br>
                        <br>
                        model Profile { <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;id     Int     @id @default(autoincrement()) <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;bio    String? <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;user   User    @relation(fields: [userId], references: [id]) <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;userId Int     @unique <br>
                        } <br>
                        <br>
                        model User { <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;id	Int		@id @default(autoincrement()) <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;name	String 	@db.VarChar(50) <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;email	String 	@db.VarChar(100) @unique <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;age	Int 	@default(18) <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;profile	Profile? <br>
                        }
                    </code>
                </div>

                <p class="mt-5"><b>‚úÖ Apply changes to the database:</b></p>
                <div class="bg-dark text-light rounded shadow-lg px-2 py-3">
                    <span>angelic.ps1 add-migration</span>
                </div>

                <p class="mt-5"><b>‚úÖ Generate schema types:</b></p>
                <div class="bg-dark text-light rounded shadow-lg px-2 py-3">
                    <span>angelic.ps1 update-database</span>
                </div>

                <p class="mt-5"><b>‚úÖ Query the tables:</b></p>
                <div class="bg-dark text-light rounded shadow-lg px-2 py-3">
                    <p>üóÉÔ∏è homeController.js</p>
                    <hr>
                    <p>
                        await this.dbContext.user.create({ <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;data: { <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: 'User 1', <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email: 'user@mail.com', <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;} <br>
                        }) <br>
                        <br>
                        var users = await this.dbContext.user.findMany(); <br>
                        return this.view('index', users);
                    </p>
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-dark text-light text-center mt-5 p-4">
        <p>Made with ‚ù§Ô∏è by Mishel Shaji and Geekinsta&reg;</p>
        <p>&copy; All rights reserved.</p>
        <hr>
        <p><small>Geekinsta is a registered trademark of Mishel Shaji.</small></p>
    </footer>
    {{> scripts}}
</body>

</html>